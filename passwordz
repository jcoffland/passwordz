#!/usr/bin/env python3

import sys
import os
import time
import copy
import subprocess
import gi

gi.require_version('Gtk', '3.0')
gi.require_version('GnomeKeyring', '1.0') # TODO this is borked!

from gi.repository import Gtk as gtk
from gi.repository import Gdk as gdk
from gi.repository import GObject as gobject
from gi.repository import GLib as glib
from gi.repository import GnomeKeyring as gnomekeyring


# TODO this does not work.  All of GnomeKeyring is deprecated and glib.Array
# is inaccessible from Python making the old API nearly useless.  To work
# with Gtk 3.0 the new libsecrets API should be used instead.


def iterate_container(widget):
    yield widget

    if isinstance(widget, gtk.Container):
        for child in widget.get_children():
            for x in iterate_container(child): yield x


class Keyring(gobject.GObject):
    timeout_name = '__keyring_timeout'


    def __init__(self, name, is_new = False):
        gobject.GObject.__init__(self)

        self.name = name
        self.timeout = 3600
        self.timeout_pass = None
        self.update()
        self.opened = is_new


    def update(self):
        result, self.info = gnomekeyring.get_info_sync(self.name)
        if result != gnomekeyring.Result.OK:
            raise Exception('Failed to load keyring: %s' % self.name)


    def get_name(self): return str(self.name)
    def is_locked(self): return self.info.get_is_locked()


    def set_timeout(self, timeout):
        if self.timeout == timeout: return
        self.timeout = timeout

        locked = self.is_locked()
        if locked: self.unlock()

        if self.timeout_pass is None:
            self.timeout_pass = Password(self)
            self.timeout_pass.set('user', self.timeout_name)

        self.timeout_pass.set('notes', str(timeout))
        self.timeout_pass.save()

        if locked: self.lock()


    def lock(self):
        gnomekeyring.lock_sync(self.name)
        self.update()


    def unlock(self, password = None):
        if not self.is_locked(): return

        self.opened = True

        # Hack to work around bad gnomekeyring.unlock_sync() binding
        result, id = gnomekeyring.item_create_sync(
            self.name, gnomekeyring.ItemType.NETWORK_PASSWORD, '__dummy__',
            glib.Array(), '', False)
        gnomekeyring.item_delete_sync(self.name, id)

        self.update()


    def load(self):
        if self.is_locked(): return []

        passwords = []

        result, ids = gnomekeyring.list_item_ids_sync(self.name)
        if result != gnomekeyring.Result.OK:
            print('Failed to load keyring ids: %s' % self.name)
            return

        for id in ids:
            result, info = gnomekeyring.item_get_info_sync(self.name, id)
            if result != gnomekeyring.Result.OK:
                print('Failed to load keyring info: %s' % self.name)
                return

            password = Password(self, id)

            if info.get_display_name() == self.timeout_name:
                self.timeout_pass = password
                self.timeout = int(password.get('notes'))

            else: passwords.append(password)

        return passwords


    def set_password(self, current, new):
        gnomekeyring.change_password_sync(self.name, current, new)


    def delete(self):
        if self.is_locked(): self.unlock()
        if self.is_locked(): return False

        gnomekeyring.delete_sync(self.name)
        return True


class Password(gobject.GObject):
    def __init__(self, keyring, id = None):
        gobject.GObject.__init__(self)

        if not isinstance(keyring, Keyring):
            raise Exception('Password parent must be Keyring')

        self.keyring = keyring
        self.id = id

        self.update()


    def __repr__(self): return repr(self.name)
    def __str__(self): return self.name


    def copy(self, other):
        self.set('user', other.get('user'))
        self.set('server', other.get('server'))
        self.set('protocol', other.get('protocol'))
        self.password = other.password
        self.set('notes', other.get('notes'))


    def update(self):
        if self.id is None:
            self.name = ''
            self.password = ''
            self.attrs = {}
            return

        result, self.info \
            = gnomekeyring.item_get_info_sync(self.keyring.name, self.id)

        if result != gnomekeyring.Result.OK:
            print('Failed to load keyring info: %s' % self.keyring.name)
            return

        self.name = self.info.get_display_name()
        self.password = self.info.get_secret()
        self.attrs = glib.Array()
        gnomekeyring.item_get_attributes_sync(
            self.keyring.name, self.id, self.attrs)


    def get(self, name):
        return 'TODO'
        return self.attrs.get(name, '')

    def set(self, name, value): self.attrs[name] = value

    def get_comment(self):
        return self.get('notes').replace('\n', ' ')

    def get_data(self):
        return [str(self), self.get_comment(), self]

    def add(self, store, parent):
        return store.append(parent, self.get_data())


    def update_store(self, store, iter):
        store.set_value(iter, 0, self.name)
        store.set_value(iter, 1, self.get_comment())


    def save(self):
        new_attrs = {}
        for name in self.attrs:
            value = self.attrs[name].strip()
            if value: new_attrs[name] = value
        self.attrs = new_attrs

        if 'user' in self.attrs: self.name = self.attrs['user']
        else: self.name = ''

        if 'server' in self.attrs:
            if self.name: self.name += '@'
            self.name += self.attrs['server']

        if 'protocol' in self.attrs:
            if self.name: self.name = '://' + self.name
            self.name = self.attrs['protocol'] + self.name

        if not self.name: return False

        old_id = self.id
        self.id = gnomekeyring.item_create_sync(
                self.keyring.name, gnomekeyring.ItemType.NETWORK_PASSWORD,
                self.name, {}, self.password, False)

        gnomekeyring.item_set_attributes_sync(self.keyring.name, self.id,
                                              self.attrs)

        if old_id is not None:
            gnomekeyring.item_delete_sync(self.keyring.name, old_id)

        self.update()

        # TODO verify result
        return True


    def delete(self):
        if self.id is not None:
            gnomekeyring.item_delete_sync(self.keyring.name, self.id)
            self.id = None


class Passwordz:
    def __init__(self, glade = 'passwordz.glade'):
        self.status_timeout_id = None
        self.clipboard_timeout_id = None
        self.last_clipboard = None
        self.idle_timeout_id = None
        self.last_event = time.time()
        self.timeout_keyrings = {}

        # Build GUI
        builder = gtk.Builder()
        try:
            if len(glade) < 1024: builder.add_from_file(glade)
            else: builder.add_from_string(glade)
        except Exception as e:
            print('Failed to load UI file: %s\n%s' % (glade, e))
            sys.exit(1)

        # Get objects
        self.window = builder.get_object('window')
        self.clipboard_button = builder.get_object('clipboard_button')
        self.keyring_dialog = builder.get_object('keyring_dialog')
        self.keyring_dialog.keyring = None
        self.password_dialog = builder.get_object('password_dialog')
        self.password_dialog.password = None
        self.tree = builder.get_object('tree')
        self.store = builder.get_object('tree_store')
        self.password_menu = builder.get_object('password_menu')
        self.keyring_menu = builder.get_object('keyring_menu')
        self.status_bar = builder.get_object('status_bar')
        self.status_label = builder.get_object('status_label')

        self.keyring_name_entry = builder.get_object('keyring_name_entry')
        self.keyring_timeout_spin = builder.get_object('keyring_timeout_spin')
        self.current_password_label = \
            builder.get_object('current_password_label')
        self.current_password_entry = \
            builder.get_object('current_password_entry')
        self.new_password_entry = builder.get_object('new_password_entry')
        self.repeat_password_entry = builder.get_object('repeat_password_entry')
        self.password_match_label = builder.get_object('password_match_label')
        self.password_match_image = builder.get_object('password_match_image')

        self.user_entry = builder.get_object('user_entry')
        self.server_entry = builder.get_object('server_entry')
        self.protocol_entry = builder.get_object('protocol_entry')
        self.password_entry = builder.get_object('password_entry')
        self.show_password_check = builder.get_object('show_password_check')
        self.notes_buffer = builder.get_object('notes_buffer')

        self.clipboard = gtk.Clipboard.get(gdk.SELECTION_PRIMARY)
        self.clipboard_primary = True

        # Sorting
        self.store.set_sort_column_id(0, gtk.SortType.ASCENDING)

        # Drag & Drop
        targets = [gtk.TargetEntry.new('text/plain', 0, 1)]
        self.tree.enable_model_drag_source(gdk.ModifierType.BUTTON1_MASK,
                                           targets,
                                           gdk.DragAction.MOVE |
                                           gdk.DragAction.DEFAULT)
        self.tree.enable_model_drag_dest(targets, gdk.DragAction.DEFAULT)

        # Connect signals
        builder.connect_signals(self)

        # Connect idle reset signals
        for widget in (self.window, self.keyring_dialog, self.password_dialog):
            for widget in iterate_container(widget):
                widget.connect('button-press-event', self.reset_idle_timer)
                widget.connect('key-press-event', self.reset_idle_timer)

        self.load()

        glib.timeout_add_seconds(1, self.idle_timeout)


    def run(self):
        self.window.show()
        gtk.main()


    def quit(self):
        # Lock all keyrings we opened
        for name, keyring in list(self.timeout_keyrings.items()):
            if keyring.opened and keyring.timeout: self.lock(keyring)

        gtk.main_quit()


    def error(self, message):
        try :
            dialog = gtk.MessageDialog(
                self.window, gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
                gtk.MESSAGE_ERROR, gtk.BUTTONS_OK, message)
            dialog.run()

        finally:
            dialog.destroy()


    def load(self):
        result, rings = gnomekeyring.list_keyring_names_sync()

        for keyring in rings:
            try:
                name = str(keyring)
                keyring = Keyring(name)

            except Exception as e:
                print('Failed to load keyring: ' + keyring)
                continue

            if name == 'login':
                try:
                    dialog = gtk.MessageDialog(
                        self.window,
                        gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
                        gtk.MESSAGE_QUESTION, gtk.BUTTONS_YES_NO,
                        'The "login" keyring will, by default, remeber the '
                        'passwords to all your keyrings and automatically '
                        'unlock them when you login.  This is not desirable if '
                        'you have keyrings with sensitive information.  The '
                        '"login" keyring will also keep your keyrings from '
                        'automatically closing after the time out.  Deleting '
                        'the "login" keyring after logging in solves the '
                        'problem with no major side-effects.\n\n'
                        'Would you like to delete the "login" keyring now?')

                    if dialog.run() == gtk.RESPONSE_YES:
                        keyring.delete()
                        continue

                finally: dialog.destroy()

            parent = self.store.append(None, [name, '', keyring])

            for password in keyring.load(): password.add(self.store, parent)


    def status_timeout(self, data = None):
        self.status_bar.pop(0)


    def set_status(self, text):
        self.status_bar.push(0, text)

        if self.status_timeout_id is not None:
           glib.source_remove(self.status_timeout_id)
        self.status_timeout_id = \
            glib.timeout_add_seconds(5, self.status_timeout)


    def clipboard_reset(self, clipboard, text, data = None):
        if text == self.last_clipboard:
            self.last_clipboard = None
            self.clipboard.clear()
            self.set_status('Cleared clipboard')


    def clipboard_timeout(self, data = None):
        self.clipboard.request_text(self.clipboard_reset)
        self.clipboard_timeout_id = None
        return False


    def set_clipboard(self, text):
        if self.clipboard_timeout_id is not None:
            glib.source_remove(self.clipboard_timeout_id)
        self.clipboard_timeout_id = \
            glib.timeout_add_seconds(60, self.clipboard_timeout)

        self.last_clipboard = text
        self.clipboard.set_text(text, len(text))


    def get_selected(self):
        model, iter = self.tree.get_selection().get_selected()

        if iter is not None: return self.store.get_value(iter, 2), iter
        return None, None


    def reset_idle_timer(self, widget, data = None):
        self.last_event = time.time()


    def idle_timeout(self, data = None):
        now = time.time()

        for name, keyring in list(self.timeout_keyrings.items()):
            if keyring.opened and keyring.timeout and \
                    self.last_event + keyring.timeout < now:
                # Hide keyring dialog if open on this keyring
                if self.keyring_dialog.keyring and \
                        self.keyring_dialog.keyring.name == name:
                    self.keyring_dialog.hide()

                # Hide password dialog if open on this keyring
                if self.password_dialog.password and \
                        self.password_dialog.password.keyring.name == name:
                    self.password_dialog.hide()

                self.lock(keyring)

        return True # Keep going


    def lock(self, keyring, parent = None):
        if keyring.is_locked():  return

        keyring.lock()
        if keyring.name in self.timeout_keyrings:
            del self.timeout_keyrings[keyring.name]

        if keyring.is_locked():
            if parent is None:
                # Find the keyring iterator in the tree store
                iter = self.store.get_iter_first()
                while True:
                    entry = self.store.get_value(iter, 2)
                    if entry.name == keyring.name:
                        parent = iter
                        break
                    iter = self.store.iter_next(iter)

            while True:
                iter = self.store.iter_children(parent)
                if iter is None: break
                self.store.remove(iter)


    def unlock(self, keyring, iter):
        if not keyring.is_locked():  return
        keyring.unlock()
        if not keyring.is_locked():
            self.timeout_keyrings[keyring.name] = keyring
            for password in keyring.load(): password.add(self.store, iter)


    # Toolbar signals
    def on_lock_all(self, widget, data = None):
        gnomekeyring.lock_all_sync()


    def on_clipboard_toggle(self, widget, data = None):
        self.clipboard_timeout() # Clear current clipboard password if any

        if self.clipboard_primary:
            self.clipboard = gtk.clipboard_get()
            self.clipboard_button.set_stock_id(gtk.STOCK_PASTE)
            print('Switched to standard clipboard')

        else:
            self.clipboard = gtk.clipboard_get('PRIMARY')
            self.clipboard_button.set_stock_id(gtk.STOCK_INDEX)
            print('Switched to primary clipboard')

        self.clipboard_primary = not self.clipboard_primary


    def on_quit(self, widget, data = None):
        self.quit()


    # Window signals
    def on_window_destroy(self, widget, data = None):
        self.quit()


    def on_window_delete(self, widget, event, data = None):
        self.quit()


    # Tree signals
    def on_tree_row_activated(self, widget, path, view_column, data = None):
        iter = self.store.get_iter(path)
        item = self.store.get_value(iter, 2)

        if isinstance(item, Password):
            # Copy password to clipboard
            self.set_clipboard(item.password)
            self.set_status('Copied password to clipboard')

        elif isinstance(item, Keyring):
            if item.is_locked(): self.unlock(item, iter)
            else: self.lock(item, iter)

            if not item.is_locked(): self.tree.expand_row(path, False)


    def on_tree_button_press_event(self, widget, event, data = None):
        if event.button != 3: return

        x, y = event.get_coords()
        path = self.tree.get_path_at_pos(int(x), int(y))
        if path is not None:
            iter = self.store.get_iter(path[0])
            item = self.store.get_value(iter, 2)
        else:
            item, iter = self.get_selected()
            path = self.store.get_path(iter)

        if isinstance(item, Password):
            self.password_menu.popup(None, None, None, button = event.button,
                                     activate_time = event.time, data = data)

        elif isinstance(item, Keyring):
            self.keyring_menu.popup(None, None, None, button = event.button,
                                    activate_time = event.time, data = data)


    def on_tree_drag_data_get(self, treeview, context, selection, info,
                              timestamp):
        item, iter = self.get_selected()
        selection.set(selection.target, 8,
                      self.store.get_string_from_iter(iter))


    def on_tree_drag_data_received(self, treeview, context, x, y, selection,
                                   info, timestamp):
        drop_info = treeview.get_dest_row_at_pos(x, y)

        if drop_info:
            dst_path, position = drop_info

            src_iter = self.store.get_iter_from_string(selection.data)
            src = self.store.get_value(src_iter, 2)
            if not isinstance(src, Password):
                print('Dropped element is not a Password')
                context.drop_finish(False, timestamp)
                return

            dst_iter = self.store.get_iter(dst_path)
            dst = self.store.get_value(dst_iter, 2)
            if isinstance(dst, Password):
                keyring = dst.keyring
                keyring_iter = self.store.iter_parent(dst_iter)

            elif isinstance(dst, Keyring):
                keyring = dst
                keyring_iter = dst_iter

            else: return

            # Check for drag to same keyring
            if src.keyring.name == keyring.name: return

            self.unlock(keyring, keyring_iter)

            password = Password(keyring)
            password.copy(src)
            if password.save():
                data = password.get_data()

                if isinstance(dst, Keyring): self.store.prepend(dst_iter, data)
                elif (position == gtk.TREE_VIEW_DROP_BEFORE
                      or position == gtk.TREE_VIEW_DROP_INTO_OR_BEFORE):
                    self.store.insert_before(None, dst_iter, data)
                else: self.store.insert_after(None, dst_iter, data)

                # Remove orig
                src.delete()
                context.finish(True, True, timestamp)

            else: print('Drag and drop failed')



    # Keyring menu signals
    def on_keyring_lock(self, widget = None, data = None):
        keyring, iter = self.get_selected()
        self.lock(keyring, iter)


    def on_keyring_unlock(self, widget = None, data = None):
        keyring, iter = self.get_selected()
        self.unlock(keyring, iter)


    def on_keyring_edit(self, widget, data = None):
        keyring, iter = self.get_selected()

        self.keyring_name_entry.set_text(keyring.get_name())
        self.keyring_name_entry.set_editable(False)
        self.keyring_name_entry.set_property('can-focus', False)
        self.keyring_timeout_spin.set_value(keyring.timeout)
        self.current_password_entry.set_text('')
        self.new_password_entry.set_text('')
        self.repeat_password_entry.set_text('')
        self.current_password_label.set_visible(True)
        self.current_password_entry.set_visible(True)

        self.keyring_dialog.keyring = keyring

        self.keyring_dialog.show()


    def on_keyring_new(self, widget, data = None):
        self.keyring_name_entry.set_text('')
        self.keyring_name_entry.set_editable(True)
        self.keyring_name_entry.set_property('can-focus', True)
        self.keyring_timeout_spin.set_value(300)
        self.current_password_label.set_visible(False)
        self.current_password_entry.set_visible(False)
        self.new_password_entry.set_text('')
        self.repeat_password_entry.set_text('')

        self.keyring_dialog.keyring = None

        self.keyring_dialog.show()


    def on_keyring_delete(self, widget, data = None):
        keyring, iter = self.get_selected()

        try:
            dialog = gtk.MessageDialog(
                self.window,
                gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
                gtk.MESSAGE_QUESTION, gtk.BUTTONS_YES_NO,
                'Are you sure you want to delete the keyring?')

            if dialog.run() == gtk.RESPONSE_YES:
                if keyring.delete(): self.store.remove(iter)

        finally:
            dialog.destroy()


    # Keyring dialog signals
    def on_keyring_cancel(self, widget, data = None):
        self.keyring_dialog.hide()


    def on_keyring_save(self, widget, data = None):
        keyring = self.keyring_dialog.keyring

        name = self.keyring_name_entry.get_text().lower()
        if not name:
            self.error('Invalid name')
            return

        current_pass = self.current_password_entry.get_text()

        if current_pass or keyring is None:
            new_pass = self.new_password_entry.get_text()
            repeat_pass = self.repeat_password_entry.get_text()
            if new_pass != repeat_pass:
                self.error('Passwords don\'t match')
                return
            if not new_pass:
                self.error('Invalid password')
                return

        if keyring is None:
            gnomekeyring.create_sync(name, new_pass)
            keyring = Keyring(name, True)
            self.store.append(None, [name, '', keyring])

        elif current_pass and new_pass:
            keyring.set_password(current_pass, new_pass)

        keyring.set_timeout(int(self.keyring_timeout_spin.get_value()))


        self.keyring_dialog.hide()


    def on_password_entry_changed(self, data = None):
        new_pass = self.new_password_entry.get_text()
        repeat_pass = self.repeat_password_entry.get_text()

        if new_pass == repeat_pass:
            self.password_match_image.set_from_stock(gtk.STOCK_OK,
                                                     gtk.ICON_SIZE_BUTTON)
            self.password_match_label.set_text('Passwords match')
        else:
            self.password_match_image.set_from_stock(gtk.STOCK_CANCEL,
                                                     gtk.ICON_SIZE_BUTTON)
            self.password_match_label.set_text('Passwords do not match')


    # Password menu signals
    def on_password_edit(self, widget, data = None):
        password, iter = self.get_selected()

        self.user_entry.set_text(password.get('user'))
        self.server_entry.set_text(password.get('server'))
        self.protocol_entry.set_text(password.get('protocol'))
        self.notes_buffer.set_text(password.get('notes'))
        self.show_password_check.set_active(False)
        self.password_entry.set_text(password.password)

        self.password_dialog.parent_iter = self.store.iter_parent(iter)
        self.password_dialog.iter = iter
        self.password_dialog.password = password

        self.password_dialog.show()


    def on_password_new(self, widget, data = None):
        item, iter = self.get_selected()

        self.user_entry.set_text('')
        self.server_entry.set_text('')
        self.protocol_entry.set_text('')
        self.notes_buffer.set_text('')
        self.show_password_check.set_active(False)
        self.password_entry.set_text('')

        if isinstance(item, Password):
            self.password_dialog.keyring = item.keyring
            self.password_dialog.parent_iter = self.store.iter_parent(iter)

        else:
            self.password_dialog.keyring = item
            self.password_dialog.parent_iter = iter

        self.password_dialog.iter = None
        self.password_dialog.password = None

        self.password_dialog.show()


    def on_password_delete(self, widget, data = None):
        password, iter = self.get_selected()
        password.delete()
        self.store.remove(iter)


    # Password dialog signals
    def on_password_cancel(self, widget, data = None):
        self.password_dialog.hide()


    def on_password_save(self, widget, data = None):
        self.password_dialog.hide()

        parent = self.password_dialog.parent_iter
        iter = self.password_dialog.iter
        password = self.password_dialog.password

        if password is None:
            password = Password(self.password_dialog.keyring)
            iter = password.add(self.store, parent)
            new = True
        else: new = False

        password.set('user', self.user_entry.get_text())
        password.set('server', self.server_entry.get_text())
        password.set('protocol', self.protocol_entry.get_text())
        password.password = self.password_entry.get_text()
        start = self.notes_buffer.get_start_iter()
        end = self.notes_buffer.get_end_iter()
        password.set('notes', self.notes_buffer.get_text(start, end))

        if password.save(): password.update_store(self.store, iter)
        else:
            if new:
                password.delete()
                self.store.remove(iter)

            self.error('Save failed')


    def on_show_password_check_toggled(self, widget, data = None):
        self.password_entry.set_visibility(widget.get_active())


    def on_generate_password(self, widget, data = None):
        proc = subprocess.Popen(['apg', '-n1', '-m8', '-x12', '-a0'],
                                stdout = subprocess.PIPE)
        out, err = proc.communicate()
        passwd = out.strip()

        if not proc.returncode and passwd:
            self.password_entry.set_text(passwd)


if __name__ == '__main__':
    import inspect
    file = os.path.realpath(inspect.getfile(inspect.currentframe()))
    dir = os.path.dirname(file)
    if not dir: dir = '.'
    glade = dir + '/passwordz.glade'

    app = Passwordz(glade)
    app.run()
